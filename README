NAME
		A dynamic memory allocator using the worst fit algorithm

SYNOPSIS
		void *malloc(size_t size);
		void free(void *ptr);

DESCRIPTION
		malloc() allocates size bytes and returns a pointer to the
		allocated memory. The pointer returned can later be passed to
		free() which de-allocates the memory. malloc() returns
		NULL if the memory allocation failed. This may occur if the
		system is out of memory or the process has exceeded it memory
		limit(see getrlimit(2)).

		free() frees the memory segment pointed to by pointer which
		must point to an address previously returned by malloc().
		If another pointer is passed undefined behavior occurs. If a
		pointer to a memory segment that has already been freed is
		passed to free() undefined behavior occurs. If a NULL
		pointer is passed, free() returns immediately with no side
		effects.

FEATURES
		* All memory segments returned by malloc() are 8-byte
		  aligned.
		* Double-frees are caught and handled with an error message
		  and immediate program exit.  
		* As blocks of memory are freed, the heap size
		* shrinks to minimum size.

USAGE
		This implementation of malloc() and free() is packaged as a
		shared library. Linking to this library overrides the malloc()
		and free() implementation in glibc.

TODO
		* Optimize malloc_chunk_t struct for size by incorporating the
		  'used' flag inside 'size' as a bit-field.  
		* Include other optional memory chunk re-use algorithms
		  besides 'worst fit'. 
		* Make properties such as byte alignment, minimum allocation
		  size tunable.
		* Write comprehensive test suite.
		* Implement realloc() and calloc() so that arbitrary programs
		  can be forced to use this lib via LD_PRELOAD.
